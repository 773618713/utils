<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans                             
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd                             
	http://www.springframework.org/schema/context                             
	http://www.springframework.org/schema/context/spring-context-3.1.xsd                             
	http://www.springframework.org/schema/mvc                             
	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd                         
	http://www.springframework.org/schema/tx        
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd       
	http://www.springframework.org/schema/aop        
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	
	<!-- 自动扫描 -->  
    <context:component-scan base-package="com.scy.ssm">
    	<!-- 这里先不用扫描@Controller,因为需要先将@Service扫描,保证事务有效 -->
	    <context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation"/> 
	</context:component-scan>
	
   <!--  <bean class="cn.wifiedu.core.dao.impl.OpenDaoImpl" id="openDao"/>
	<bean class="cn.wifiedu.core.service.impl.OpenServiceImpl" id="openService"/>
	<bean class="cn.wifiedu.core.service.impl.InitServiceImpl" id="initService"/> -->
	 
    <!-- 引入配置文件 -->  
    <!-- <bean class="cn.wifiedu.core.config.DecryptPropertyPlaceholderConfigurer" id="propertyConfigurer">  
        <property name="location" value="classpath:base.properties"/>  
    </bean> -->  

	<!-- 引入redis配置 -->
    <!-- <context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"/> -->

	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
	</bean>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<!-- 基本属性 url、user、password 连接信息可以写着或写配置文件 -->
		<property name="url" value="${sc_db_url}" />
		<property name="username" value="${sc_db_username}" />
		<property name="password" value="${sc_db_password}" />
		<property name="driverClassName" value="${sc_db_driver}" />
		<!-- 配置监控统计拦截的filters 这个表示此数据源是否加入监控 -->
		<property name="filters" value="stat" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="maxActive" value="20" />
		<property name="initialSize" value="1" />
		<property name="maxWait" value="60000" />
		<property name="minIdle" value="1" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="50" />
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:sqlMapConfig.xml"/>
		<!-- 自动扫描mapping.xml文件，**表示迭代查找,也可在sqlMapConfig.xml中单独指定xml文件 -->
		<property name="mapperLocations" value="classpath:com/scy/ssm/mapper/**/*.xml" />
		<property name="plugins">
		    <array>
		      <bean class="com.github.pagehelper.PageInterceptor">
		        <property name="properties">
		          <!--使用下面的方式配置参数，一行配置一个 -->
		          <value>
		            params=value1
		          </value>
		        </property>
		      </bean>
		    </array>
		</property>
	</bean>

	<!-- mybatis spring sqlSessionTemplate,使用时直接让spring注入即可 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean>
	
	
	
	
	<!-- Redis 配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.pool.maxTotal}" />
        <property name="maxIdle" value="${redis.pool.maxIdle}" />
        <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
    </bean>

    <bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration"/>

    <!-- redis单节点数据库连接配置 -->
    <bean class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.ip}" />
        <property name="port" value="${redis.port}" />
        <property name="poolConfig" ref="jedisPoolConfig" />
    </bean>
	
	<!--事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 使用注解事务，需要添加Transactional注解属性 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>